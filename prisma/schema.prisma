// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_DATABASE_URL")
}

model User {
  id             String          @id @unique
  data           Json? // Made Json optional as it might not always be present
  store          Store?          @relation("UserStore")
  createdAt      DateTime        @default(now())
  items          Item[]
  categories     Category[]
  modifiers      Modifier[]
  modifiergroups ModifierGroup[]
  Menu           Menu[]
}

model Store {
  id                 String     @id @unique @default(uuid())
  name               String
  ownerId            String     @unique
  owner              User       @relation("UserStore", fields: [ownerId], references: [id])
  locations          Location[]
  menus              Menu[]
  settings           Json? // Made Json optional
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  site_subdomain     String?    @unique
  site_logo          String?
  site_cover_image   String?
  site_custom_domain String?
  orders             Order[]
  carts              Cart[]     @relation("StoreToCart")
}

model Location {
  id        String   @id @default(uuid())
  address   String
  storeId   String
  store     Store    @relation(fields: [storeId], references: [id])
  menus     Menu[]   @relation("MenuLocations")
  openHours Json? // Made Json optional
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Menu {
  id           String     @id @default(uuid())
  name         String
  storeId      String
  store        Store      @relation(fields: [storeId], references: [id])
  locations    Location[] @relation("MenuLocations")
  isAvailable  Boolean    @default(true)
  availability Json? // Made Json optional
  categories   Category[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String
  user         User       @relation(fields: [userId], references: [id])
}

model Category {
  id           String   @id @default(uuid())
  name         String
  description  String? // Made description optional
  menuId       String?
  menu         Menu?    @relation(fields: [menuId], references: [id])
  items        Item[]   @relation("CategoryItems")
  isAvailable  Boolean? @default(true)
  availability Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id])
}

model Item {
  id              String          @id @default(uuid())
  name            String
  imageUrl        String? // Made imageUrl optional
  displayName     String? // Made displayName optional
  description     String?
  price           Float
  options         String?
  allergens       String?
  categoryId      String?
  // Relation field for the many-to-many relationship
  categories      Category[]      @relation("CategoryItems")
  isAvailable     Boolean?        @default(true)
  availability    Json?
  // Relation field for the many-to-many relationship
  modifierGroups  ModifierGroup[] @relation("ItemModifierGroups")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  stripeProductId String?         @unique // Ensure Stripe IDs are unique if used
  stripePriceId   String?         @unique // Ensure Stripe IDs are unique if used
}

model ModifierGroup {
  id           String     @id @default(uuid())
  name         String
  minSelect    Int        @default(0) // Default minSelect to 0
  maxSelect    Int        @default(1) // Default maxSelect to 1
  // Relation field for the many-to-many relationship
  items        Item[]     @relation("ItemModifierGroups")
  // Relation field for the one-to-many relationship
  modifiers    Modifier[] @relation("ModifierGroupModifiers")
  isAvailable  Boolean?   @default(true)
  availability Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String
  user         User       @relation(fields: [userId], references: [id])
}

model Modifier {
  id              String          @id @default(uuid())
  name            String
  price           Float           @default(0) // Default price to 0
  imageUrl        String?
  displayName     String?
  description     String?
  minSelect       Int? // These might not be needed on Modifier itself if controlled by Group
  maxSelect       Int? // These might not be needed on Modifier itself if controlled by Group
  // Relation field for the many-to-many relationship
  modifierGroups  ModifierGroup[] @relation("ModifierGroupModifiers")
  isAvailable     Boolean?        @default(true)
  availability    Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  stripeProductId String?         @unique // Ensure Stripe IDs are unique if used
  stripePriceId   String?         @unique // Ensure Stripe IDs are unique if used
}

// --- Enums ---
enum ItemOptions {
  ALCOHOLIC
  GLUTEN_FREE
  VEGETARIAN
}

enum ItemAllergens {
  DAIRY
  EGGS
  FISH
  GLUTEN
  PEANUTS
  SOY
  TREE_NUTS
}

enum OrderStatus {
  NEW
  ACCEPTED
  PREPARING
  READY
  COMPLETED
  CANCELED
}

enum DeliveryStatus {
  PENDING
  SCHEDULED
  COURIER_ASSIGNED
  COURIER_ARRIVED
  PICKED_UP
  DELIVERED
  FAILED
  CANCELED // Added canceled status for delivery
}

// --- Order Model ---
model Order {
  // Removed stripeCheckoutSessionId as primary flow uses Payment Intent
  // stripeCheckoutSessionId String? // Keep if needed for manual orders or legacy data

  id              String      @id @default(uuid())
  orderNumber     String      @unique
  status          OrderStatus @default(NEW)
  items           OrderItem[]
  subtotal        Float
  tax             Float
  deliveryFee     Float?
  tip             Float?      // Added Tip field
  total           Float
  customerName    String
  customerPhone   String?
  customerEmail   String?
  customerAddress String?
  notes           String?

  // Preparation & delivery fields
  prepTime        Int?
  deliveryQuoteId String?
  deliveryId      String?

  // Delivery status tracking
  deliveryStatus       DeliveryStatus? @default(PENDING)
  uberStatus           String?
  uberTrackingUrl      String?

  // Courier information
  dasherName           String?
  dasherPhone          String?
  courierLocationLat   Float?
  courierLocationLng   Float?
  courierVehicleType   String?
  courierVehicleMake   String?
  courierVehicleModel  String?
  courierVehicleColor  String?
  courierRating        String?

  // Delivery timing
  estimatedPickupTime  DateTime?
  estimatedDropoffTime DateTime?

  // Refund information
  refundId             String? // Store Stripe Refund ID if applicable
  refundAmount         Float?
  refundReason         String?
  refundPartyAtFault   String?
  refundItems          Json? // Store refunded items as JSON
  refundFees           Json? // Store refunded fees as JSON
  refundedAt           DateTime?

  // Payment tracking (NEW/UPDATED)
  paymentIntentId String?     @unique // Payment Intent ID is crucial and should be unique
  paymentStatus   String?     // e.g., 'requires_capture', 'succeeded', 'canceled', 'failed'

  // Relationships
  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  // Timestamps
  createdAt   DateTime  @default(now()) // Use non-optional DateTime
  updatedAt   DateTime  @updatedAt // Use non-optional DateTime
  lastUpdated DateTime? // Keep for webhook updates if needed

  // Legacy fields (keep if needed, otherwise remove)
  doordashTrackingUrl  String?
  doordashFee          Float?
  doordashStatus       String?
  pickupTimeEstimated  DateTime?
  dropoffTimeEstimated DateTime?
  supportReference     String?
}

model OrderItem {
  id        String  @id @default(uuid())
  name      String
  quantity  Int
  price     Float
  modifiers Json? // Store selected modifiers as JSON object/array
  notes     String?
  itemId    String? // Reference to original item if available

  // Relationships
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- Cart Models (Keep as is if used for cart persistence) ---
model Cart {
  id              String     @id @default(uuid())
  items           CartItem[]
  customerName    String?
  customerPhone   String?
  customerEmail   String?
  deliveryAddress String?
  deliveryFee     Float?
  storeId         String
  store           Store      @relation("StoreToCart", fields: [storeId], references: [id])
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(uuid())
  name      String
  quantity  Int
  price     Float
  modifiers Json? // Store selected modifiers as JSON object/array
  notes     String?
  itemId    String? // Reference to original item

  // Relationships
  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

