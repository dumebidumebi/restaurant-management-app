// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_DATABASE_URL")
}

model User {
  id             String          @id @unique
  data           Json
  store          Store?          @relation("UserStore")
  createdAt      DateTime        @default(now())
  items          Item[]
  categories     Category[]
  modifiers      Modifier[]
  modifiergroups ModifierGroup[]
  Menu           Menu[]
}

model Store {
  id                 String     @id @unique @default(uuid())
  name               String
  ownerId            String     @unique
  owner              User       @relation("UserStore", fields: [ownerId], references: [id])
  locations          Location[]
  menus              Menu[]
  settings           Json // Contains settings divided into categories
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  site_subdomain     String?    @unique
  site_logo          String?
  site_cover_image   String?
  site_custom_domain String?
}

model Location {
  id        String   @id @default(uuid())
  address   String
  storeId   String
  store     Store    @relation(fields: [storeId], references: [id])
  menus     Menu[]   @relation("MenuLocations")
  openHours Json // JSON object for open hours (e.g., Monday-Sunday)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Menu {
  id           String     @id @default(uuid())
  name         String
  storeId      String
  store        Store      @relation(fields: [storeId], references: [id])
  locations    Location[] @relation("MenuLocations")
  isAvailable  Boolean    @default(true) // Overall availability
  availability Json // JSON for availability settings (e.g., Sunday-Saturday)
  categories   Category[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String // Now required
  user         User       @relation(fields: [userId], references: [id]) // Now required
}

model Category {
  id           String   @id @default(uuid())
  name         String
  description  String
  menuId       String?
  menu         Menu?    @relation(fields: [menuId], references: [id])
  items        Item[]   @relation("CategoryItems")
  isAvailable  Boolean? @default(true) // Simple availability flag
  availability Json? // JSON for availability settings (e.g., Sunday-Saturday)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String // Now required
  user         User     @relation(fields: [userId], references: [id]) // Now required
}

model Item {
  id             String          @id @default(uuid())
  name           String
  imageUrl       String
  displayName    String
  description    String?
  price          Float
  options        String?
  allergens      String?
  categoryId     String?
  categories     Category[]      @relation("CategoryItems")
  isAvailable    Boolean?        @default(true) // Simple availability flag
  availability   Json? // JSON for availability settings (e.g., Sunday-Saturday)
  modifierGroups ModifierGroup[] @relation("ItemModifierGroups")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userId         String
  user           User            @relation(fields: [userId], references: [id])
}

model ModifierGroup {
  id           String     @id @default(uuid())
  name         String
  minSelect    Int
  maxSelect    Int
  items        Item[]     @relation("ItemModifierGroups")
  modifiers    Modifier[] @relation("ModifierGroupModifiers")
  isAvailable  Boolean?   @default(true) // Simple availability flag
  availability Json? // JSON for availability settings (e.g., Sunday-Saturday)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String
  user         User       @relation(fields: [userId], references: [id])
}

model Modifier {
  id             String          @id @default(uuid())
  name           String
  price          Float
  imageUrl       String?
  displayName    String?
  description    String?
  minSelect      Int?
  maxSelect      Int?
  modifierGroups ModifierGroup[] @relation("ModifierGroupModifiers")
  isAvailable    Boolean?        @default(true) // Simple availability flag
  availability   Json? // JSON for availability settings (e.g., Sunday-Saturday)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userId         String
  user           User            @relation(fields: [userId], references: [id])
}

enum ItemOptions {
  ALCOHOLIC
  GLUTEN_FREE
  VEGETARIAN
}

enum ItemAllergens {
  DAIRY
  EGGS
  FISH
  GLUTEN
  PEANUTS
  SOY
  TREE_NUTS
}

//sample settings
// {
//   "generalSettings": {
//     "brandName": "My Restaurant",
//     "brandLinks": {
//       "website": "https://myrestaurant.com",
//       "facebook": "https://facebook.com/myrestaurant",
//       "instagram": "https://instagram.com/myrestaurant"
//     },
//     "timezone": "America/New_York",
//     "salesTax": 8.5
//   },
//   "locationSettings": [
//     {
//       "locationId": "location-id-1",
//       "openHours": {
//         "monday": { "open": "08:00", "close": "18:00" },
//         "tuesday": { "open": "08:00", "close": "18:00" }
//       }
//     }
//   ],
//   "contactSettings": {
//     "email": "contact@myrestaurant.com",
//     "phone": "+1234567890"
//   },
//   "fulfillmentSettings": {
//     "preparationTimeMins": 15,
//     "largeOrderThreshold": 10,
//     "largeOrderPrepTimeMins": 30
//   }
// }
